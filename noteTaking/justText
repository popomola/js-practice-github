<html>
form 기본에 대한 정보 링크 : https://developer.mozilla.org/en-US/docs/Learn/Forms/Your_first_form#active_learning_implementing_our_form_html

#form
여러 요소들에 의해 구성된다.
예시->
<form action="/my-handling-form-page" method="post">
'여기서 action은 데이터를 어디로 보낼 것인지, method는 데이터를 어떻게 보낼 것인지를 정한다. 
 <ul>
  <li>
    <label for="name">Name:</label>
    <input type="text" id="name" name="user_name">
'name attribute는 브라우저측에서는 데이터를 지정할 이름을 정해주고, 서버측에서는 이름으로 데이터를 처리하게 한다.
'이 예시에서 name이 붙은 애들의 데이터는 form의 action이 정한 주소로, method에서 할당한 방식으로 전달 될 것이다.
  </li>
  <li>
    <label for="mail">E-mail:</label>
    <input type="email" id="mail" name="user_email">
  </li>
  <li>
    <label for="msg">Message:</label>
    <textarea id="msg" name="user_message"></textarea>
  </li>
  <li class="button">
    <button type="submit">Send your message</button>
'button의 type이 submit일 경우 form의 action에 해당하는 주소로 데이터를 보낸다.
  </li>
 </ul>
</form>

#React
Components - function으로도 만들 수 있고, class로도 만들 수 있다. Tech with Tim 유튜브를
보면 Components는 return값이 JSX로 작성되어야 되는 것 같다.
문법적으로 유의해야 할 점은, return값이 하나의 부모 아래에 묶여서 return되어야 한다는 것.
예를 들어 ->
function component1(){

  return(
    <div> --> 이런 식으로 하나의 부모 아래에서 return이 되어야 하는 데 만약
      <p></p>
      <h1></h1>
    </div>
  );
}
function component1(){

  return(
      <p></p> --> 이렇게 따로 두 가지가 return되는 게 안 된다는 것이다. 
      <h1></h1>
  );
}
  //--> 한편 return 안에는 html, JSX전부 사용 가능하다.

//-->component를 사용하는 방법
import logo from './logo.svg';
import './App.css';

function App() {
  return (
    <div className="App">
      <info/> // 이런 식으로 호출을 한다. 여러 번 사용할 수 있다. component니까.
    </div>
  );
}
 
function info(){
  return(
    <div>
      <h1>Hello</h1>
      <p>Write your name</p>
    </div>
  );
}

export default App; // 이런 식으로 해줘야 다른 파일에서 여기서 만든 함수를 import해서 사용할 수 있다.
                    // 만약 default를 지정 안 하면 다른 파일에서 이 파일의 함수를 import하려고 할 때,
                    // 함수를 {}여기다가 감싸줘야 한다.


//--> 한편 당연히 react에서도 변수를 만들 수 있다. 아래에 예제.
function info(){
  const title = "This is my title"; // 변수를 return 이전에 선언을 한다.
  const isShowing = false; // 얘도 사용 가능하다.
  
  //-->기본적으로 결국 react도 js기반이다. js문법을 사용 가능하다.
  //--> jsx는 html 속에서 js문법을 사용할 수 있게 해준다. 
  //--> 다만 사용하려면 {}이 괄호 안에서 사용해야 하는 듯 하다.

  return(
    <div>
      <h1>{isShowing ? title : ""}</h1>
      <p>Write your name</p>
    </div>
  );
}

export default App;
//--> 생각해보니까 어차피 react도 js를 기반으로 두는데 굳이 왜 쓰나, 
//--> 설명만 들어서는 이해가 안 되었는데 조금 써보니까 알 것 같다.
//--> js상에서 html에 영향을 주기 위해, 예를 들어 글자를 붙이거나 뭐 이미지를 붙이거나
//--> 이런 것들을 할 때 굳이 귀찮게 html의 element들을 따로 호출할 필요도 없고,
//--> 그냥 js상에서 html 혹은 유저 인터페이스에 대한, 혹은 유저 상호작용을 위한 작업을
//--> 더 쉽게 할 수 있게 만들어준다.

State
//--> 단순 state에만 해당되는 것 같지는 않고, 기본적으로 react Component를 만들 때, 맨앞글자를
      upper case로 해야한다.
//--> State 내부에서의 변화는 해당 State만을 재실행하여 업데이트 한다.
예를 들어 이런 코드가 있다. -> 
import logo from './logo.svg';
import './App.css';
import { useState } from "react";

function App() {
  return (
    <div className="App">
      <Info/>
      <ButtonState/> // ButtonState에서 변경이 일어나면 이 State가 포함된 App이 전체
                     // 다 실행되는 것이 아니라, 이 State만 변경된다.
    </div>
  );
}

function Info(){
  return <div>Hello!</div>
}

function ButtonState(){
  //대충 몇 개 기능이 있다고 쳐
}

export default App;

//-->대충 이런 react state가 있다고 치자.
function ButtonState(){
  // 이 변수 선언 방식이 이해가 안 되었는데, 갑자기 이해가 되었다.
  // 이렇게 설정을 하면 해당 변수명에 대한 함수가 설정된다. (살짝 object인가?)
  // 이러한 문법은 react의 useState특색인 것 같다.
  // 즉, 이 표현방식이 [변수이름, 변수를 설정하는 함수이름] 이런 느낌인 거 같다.
  // 그리고 useState를 통해 초기화(혹은 선언 Or useState를 할당)하여 state로서 쓸 수 있는듯.
  const [title, setTitle] = useState(""); 
  const [counter, setCounter] = useState(0);

  const updateTitleClicked= ()=>{ // 참고로 얘는 javascript문법인데, 함수를 변수에다 할당할 수 있는 줄 몰랐다.
    setTitle("WE now have a title");
  }
  const updateCounterClicked= ()=>{
    setCounter(counter+1); // 이런 식으로 함수 설정이 가능하다는데.. 아직은 이해가 잘..
                           // 차라리 이럴 거면 그냥 함수를 만들면 되지 않나가 아니네.
                           //
  }

  return (
    <div>
      <p>Title: {title}</p> 
      <p>Counter: {counter}</p> // 변수 counter는 setCounter함수와 연결되어있다.
                                // 때문에 setCounter에서의 실행결과가 곧바로 변수 setCounter에
                                // 반영된다.
      //여기서 button의 onClick에다가 {(함수이름)} 이러한 형식이 아니라
      //{함수이름} 이렇게 넣어준 이유는, ()를 사용하면 화면이 reload되거나
      //브라우저가 재시작 될 때마다 함수를 무조건 실행하게 되기 때문이다.
      //나는 오직 button이 onClick되었을 때만 함수를 실행하고 싶기 땜에
      //{}이 형식을 취한다.
      <button onClick={updateTitleClicked}>Update State</button>
      <button onClick={updateCounterClicked}>Update Counter</button>
    </div>
  )
}

React에서 Element
//--> Element를 모아서 만든 게 Component다. element가 좀 더 하위개념?
//--> 하나의 Application은 보통 하나의 root DOM node를 갖는다.
ReactDOM.render(
    <App />  // render 즉, 화면에 보여주고 싶은 요소를 하나만 이렇게 넣는다.
  document.getElementById('root') // 넣은 component를 어디에서 보여줄 것인지 위치를 가져오는 것인듯.
);




Components and Props

//--> Component를 만드는 쉬운 방법은 javascript 함수를 만드는 것이다.
//--> Prop은 Component의 매개변수로서 투입되는 일종의 input. prop은 properties의 약어
//--> Component는 그러니까 일종의 유저(programmer)가 만든 태그? UI? template인 것.
//--> Componente는 말 그대로 일종의 구성부품으로써, 기능을 잘개 쪼개서 만들어도 상관 없다.
//--> Prop은 read-only다. 즉, 그 자체로 값이 변할 수 없다. 한 번 정해지면 그대로 간다는 것인듯..?
//--> Prop은 그러니까 음... Component가 외부에서 활용이 될 때 input으로서의 역할이다. 

State
//--> Prop과 다른 점은 State는 component 자체로부터 직접 통제를 받는다. and private
//--> Prop이 외부로부터 데이터를 받는다면, State는 Component 자체에서 데이터를 통제한다는 것인듯.







































