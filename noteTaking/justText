<html>
form 기본에 대한 정보 링크 : https://developer.mozilla.org/en-US/docs/Learn/Forms/Your_first_form#active_learning_implementing_our_form_html

#form
여러 요소들에 의해 구성된다.
예시->
<form action="/my-handling-form-page" method="post">
'여기서 action은 데이터를 어디로 보낼 것인지, method는 데이터를 어떻게 보낼 것인지를 정한다. 
 <ul>
  <li>
    <label for="name">Name:</label>
    <input type="text" id="name" name="user_name">
'name attribute는 브라우저측에서는 데이터를 지정할 이름을 정해주고, 서버측에서는 이름으로 데이터를 처리하게 한다.
'이 예시에서 name이 붙은 애들의 데이터는 form의 action이 정한 주소로, method에서 할당한 방식으로 전달 될 것이다.
  </li>
  <li>
    <label for="mail">E-mail:</label>
    <input type="email" id="mail" name="user_email">
  </li>
  <li>
    <label for="msg">Message:</label>
    <textarea id="msg" name="user_message"></textarea>
  </li>
  <li class="button">
    <button type="submit">Send your message</button>
'button의 type이 submit일 경우 form의 action에 해당하는 주소로 데이터를 보낸다.
  </li>
 </ul>
</form>

#React
Components - function으로도 만들 수 있고, class로도 만들 수 있다. Tech with Tim 유튜브를
보면 Components는 return값이 JSX로 작성되어야 되는 것 같다.
문법적으로 유의해야 할 점은, return값이 하나의 부모 아래에 묶여서 return되어야 한다는 것.
예를 들어 ->
function component1(){

  return(
    <div> --> 이런 식으로 하나의 부모 아래에서 return이 되어야 하는 데 만약
      <p></p>
      <h1></h1>
    </div>
  );
}
function component1(){

  return(
      <p></p> --> 이렇게 따로 두 가지가 return되는 게 안 된다는 것이다. 
      <h1></h1>
  );
}
  //--> 한편 return 안에는 html, JSX전부 사용 가능하다.

//-->component를 사용하는 방법
import logo from './logo.svg';
import './App.css';

function App() {
  return (
    <div className="App">
      <info/> // 이런 식으로 호출을 한다. 여러 번 사용할 수 있다. component니까.
    </div>
  );
}
 
function info(){
  return(
    <div>
      <h1>Hello</h1>
      <p>Write your name</p>
    </div>
  );
}

export default App; // 이런 식으로 해줘야 다른 파일에서 여기서 만든 함수를 import해서 사용할 수 있다.
                    // 만약 default를 지정 안 하면 다른 파일에서 이 파일의 함수를 import하려고 할 때,
                    // 함수를 {}여기다가 감싸줘야 한다.


//--> 한편 당연히 react에서도 변수를 만들 수 있다. 아래에 예제.
function info(){
  const title = "This is my title"; // 변수를 return 이전에 선언을 한다.
  const isShowing = false; // 얘도 사용 가능하다.
  
  //-->기본적으로 결국 react도 js기반이다. js문법을 사용 가능하다.
  //--> jsx는 html 속에서 js문법을 사용할 수 있게 해준다. 
  //--> 다만 사용하려면 {}이 괄호 안에서 사용해야 하는 듯 하다.

  return(
    <div>
      <h1>{isShowing ? title : ""}</h1>
      <p>Write your name</p>
    </div>
  );
}

export default App;
//--> 생각해보니까 어차피 react도 js를 기반으로 두는데 굳이 왜 쓰나, 
//--> 설명만 들어서는 이해가 안 되었는데 조금 써보니까 알 것 같다.
//--> js상에서 html에 영향을 주기 위해, 예를 들어 글자를 붙이거나 뭐 이미지를 붙이거나
//--> 이런 것들을 할 때 굳이 귀찮게 html의 element들을 따로 호출할 필요도 없고,
//--> 그냥 js상에서 html 혹은 유저 인터페이스에 대한, 혹은 유저 상호작용을 위한 작업을
//--> 더 쉽게 할 수 있게 만들어준다.












































